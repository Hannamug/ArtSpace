<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hall">

<!-- INSERT -->
	<insert id="insert">
		insert into hall(hall_name, zip_code, address1, address2, hall_description, warning,
						create_date, area, width, length, height, maximum, user_id)
		values(#{hall_name}, #{zip_code}, #{address1}, #{address2}, #{hall_description}, #{warning},
					#{create_date}, #{area}, #{width}, #{length}, #{height}, #{maximum}, #{user_id})
					
			<selectKey keyProperty="hall_id" resultType="int" order="AFTER" >
				select LAST_INSERT_ID()
			</selectKey>	
					
	</insert>

	<insert id="insert_time">
		insert into hall_time(type, price, ischeck, hall_id)
		values(#{type}, #{price}, #{ischeck}, #{hall_id}) 
	</insert>

	<insert id="equi_insert">
		insert into equipment(hall_id, equip_type, equip_name, equip_num, equip_price)
		values(#{hall_id}, #{equip_type}, #{equip_name}, #{equip_num}, #{equip_price})
	</insert>
	
	<insert id="like_insert">
		insert into like_hall(status, user_id, hall_id)
		values(#{status}, #{user_id}, #{hall_id})
	</insert>

<!-- INSERT End -->

<!-- DELETE -->	
	<delete id="equi_delete_all">
		delete from equipment
		where hall_id = #{id}
	</delete>
	
	<delete id="delete">
		delete from hall
		where hall_id = #{id}
	</delete>

	<delete id="deleteAllTime">
		delete from hall_time
		where hall_id = #{hall_id}
	</delete>

<!-- DELETE End -->	
	
<!-- Update  -->
	<update id="update_info">
	   UPDATE hall
	      SET hall_name = #{hall_name},
	      	  zip_code = #{zip_code},
	          address1 = #{address1},
	          address2 = #{address2},
	          hall_description = #{hall_description},
	          warning = #{warning},
	          address1 = #{address1},
	          address2 = #{address2},
	          hall_description = #{hall_description},
	          warning = #{warning},
	          area = #{area},
	          width = #{width},
	          length = #{length},
	          height = #{height},
	          maximum = #{maximum}
	       WHERE hall_id = #{hall_id}
	</update>	
	
	<update id="post_visibility_true">
		UPDATE hall
		   SET visibility = 'Y'
		   WHERE hall_id = #{hall_id}
	</update>

	<update id="post_visibility_false">
		UPDATE hall
		   SET visibility = 'N'
		   WHERE hall_id = #{hall_id}
	</update>

	
	<update id="update_hall_time">
	   UPDATE hall_time
	      SET type = #{type},
		      price = #{price},
		      ischeck = #{ischeck}
	       WHERE hall_id = #{hall_id}
	</update>
	
	<update id="update_like">
	   UPDATE like_hall
	      SET status = #{status}
	    WHERE hall_id = #{hall_id} and user_id = #{user_id}
	</update>

<!-- Update End -->

<!-- SELECT  -->
	<select id="getHallList" resultType="com.example.demo.hall.dto.HallDTO">		
		select h.hall_id, h.hall_name, h.address1, h.create_date, h.views, h.user_id, min(ht.price) minPrice,
					count(distinct case when status='Y' then 1 end, lh.like_id, lh.hall_id) likeNum,
					ifnull(ROUND(AVG(r.rating),1), 0) rating
	  	  from hall h join hall_time ht
         		on h.hall_id = ht.hall_id
         	  left join like_hall lh
          		on h.hall_id = lh.hall_id
              left join review r
         		on h.hall_id = r.hall_id
        where h.visibility = 'Y'
		group by hall_id
		order by h.create_date desc
	</select>
	
	<select id="getHallTimeList" resultType="com.example.demo.hall.dto.HallTimeDTO">
		select *
		from hall_time
		where hall_id = #{id}
	</select>

	<select id="getEquiList" resultType="com.example.demo.hall.dto.EquipmentDTO">
		select * from equipment
		where hall_id = #{id}
		order by equip_type
	</select>
	
	
	<select id="findById" resultType="com.example.demo.hall.dto.HallDTO">
		select h.hall_id, h.hall_name, h.zip_code, h.address1, h.address2, h.hall_description, h.warning, h.create_date,
					h.views, h.area, h.width, h.length, h.height, h.maximum, h.visibility, h.user_id,
					min(ht.price) minPrice, count(distinct case when status='Y' then 1 end, lh.like_id, lh.hall_id) likeNum,
					ifnull(ROUND(AVG(r.rating),1), 0) rating
		  from hall h 
		  			  join hall_time ht
					    on h.hall_id = ht.hall_id
			     left join like_hall lh
		          		on h.hall_id = lh.hall_id
				 left join review r
		         		on h.hall_id = r.hall_id 
		 where h.hall_id = #{id}
	  group by hall_id;
	  
	</select>
	
		
	<select id="getFilterList" resultType="com.example.demo.hall.dto.HallDTO">
		select h.hall_id, h.hall_name, h.address1, h.create_date, h.views, h.user_id,
					min(ht.price) minPrice, count(distinct case when status='Y' then 1 end, lh.like_id, lh.hall_id) likeNum,
					ifnull(ROUND(AVG(r.rating),1), 0) rating
	  	  from hall h join hall_time ht
         		on h.hall_id = ht.hall_id
         	  left join like_hall lh
          		on h.hall_id = lh.hall_id
              left join review r
         		on h.hall_id = r.hall_id
                        where h.visibility = 'Y'
         <if test ="local != '' or maxPrice > 0 or maxPeople >0">
             and
         </if>
		 <if test="local != ''">		 
			 h.address1 regexp #{local}
			 <if test="maxPrice > 0">and</if>
		 </if>
		 <if test="maxPrice > 0">
			ht.price between #{minPrice} and #{maxPrice} 		 
			 <if test="maxPeople > 0">and</if>
		 </if>
		 <if test="maxPeople > 0">
	        h.maximum > #{maxPeople}
		 </if>
		
		group by hall_id
		<if test="content != null and content != ''">
	        ORDER BY CASE 
                     WHEN h.hall_name REGEXP(#{content}) THEN 1
                     ELSE 0
                 END desc,
		</if>
		<if test="content == null or content == ''">
			ORDER BY
		</if>
        <choose>
            <when test="sort == 'create_date'"> 
                h.create_date desc
            </when>
            <when test="sort == 'views'"> 
                h.views desc
            </when>
            <when test="sort == 'min_price'"> 
                minPrice
            </when>
            <when test="sort == 'max_price'"> 
                minPrice desc
            </when>
            <when test="sort == 'like_num'"> 
                likeNum desc
            </when>
            <when test="sort == 'high_rating'"> 
                rating desc
            </when>
            
            <otherwise> 
            </otherwise>
        </choose>
	</select>

	<select id="likeCheck" resultType="int">
		select count(*)
		from like_hall
		where hall_id = #{hall_id} and user_id = #{user_id}
	</select>
	
	<select id="getLikeStatus" resultType="string">
		select status
		from like_hall
		where hall_id = #{hall_id} and user_id = #{user_id}
	</select>
	
	<!-- 공연장 리뷰들 가져오기 -->
	<select id="getReviewList" resultType="com.example.demo.hall.dto.ReviewDTO">
		select r.*, u.nickname from review r join user u
		on r.user_id = u.user_id
		where r.hall_id = #{hall_id}
	</select>
	
	

<!-- SELECT End -->

</mapper>